name: Docker CI

on:
  push:
    paths:
      - 'Dockerfile'
  workflow_dispatch: # 수동 트리거 활성화

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKER: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  set-up:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      lower_case_image_name: ${{ steps.lower.outputs.lower_case_image_name }}
    steps:
      # Step 1: Extract Docker metadata
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value={{date 'YYYYMMDD-HHmmss' tz='Asia/Seoul'}}
          labels: |
            maintainer=aisflow@askfront.com
          flavor: |
            latest=true

      # Step 2: Convert IMAGE_NAME to lowercase
      - name: Convert IMAGE_NAME to lowercase
        id: lower
        run: |
          LOWER_CASE_IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "lower_case_image_name=${LOWER_CASE_IMAGE_NAME}" >> $GITHUB_OUTPUT

  build:
    needs: [set-up]
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64

    steps:
      # Step 1: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 2: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_VERSION }}

      # Step 3: Set Clean Version
      - name: Set Clean Version
        run: |
          echo "VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

      # Step 4: Log into GHCR
      - name: Log into GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Log into DockerHub
      - name: Log into DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Step 6: Restore build cache
      - name: Restore build cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            yarn-cache
            yarn-berry-cache
          key: buildkit-${{ runner.os }}-${{ matrix.arch }}

      # Step 7: Inject build cache
      - name: Inject build cache
        uses: reproducible-containers/buildkit-cache-dance@v3.1.2
        with:
          cache-map: |
            {
              "yarn-cache": "/build/.yarn/cache",
              "yarn-berry-cache": "/build/.yarn/berry/cache"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      # Step 8: Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_GHCR }}/${{ needs.set-up.outputs.lower_case_image_name }}:${{ matrix.arch }}
            ${{ env.REGISTRY_DOCKER }}/${{ needs.set-up.outputs.lower_case_image_name }}:${{ matrix.arch }}
          labels: ${{ needs.set-up.outputs.labels }}
          platforms: ${{ matrix.platform }}

  manifest:
    needs: [set-up, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      # Step 1: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 2: Log into GitHub Container Registry (GHCR)
      - name: Log into GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Log into Docker Registry
      - name: Log into Docker Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Step 4: Create and push Docker manifest
      - name: Create and push Docker manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          index-annotations: |
            ${{ needs.set-up.outputs.labels }}
          tags: |
            ${{ needs.set-up.outputs.tags }}
          sources: |
            ${{ env.REGISTRY_GHCR }}/${{ needs.set-up.outputs.lower_case_image_name }}:amd64
            ${{ env.REGISTRY_GHCR }}/${{ needs.set-up.outputs.lower_case_image_name }}:arm64
